#!/bin/bash

set -e
set -o pipefail

usage() {
  cat <<EOF

  $(basename "${0}") reveals Kubernetes Secret data.

  Usage:
      kubectl reveal secret SECRET_NAME [optional flags]

  Options:
      -n, --namespace   specify secrets by key=value format

  Examples:

    # Reveal Secret data in the current namespace.
    $ kubectl reveal secret my-secret

    # Reveal Secret data in the specified namespace.
    $ kubectl reveal secret my-secret -n my-namespace

EOF
}

reveal_secret() {
  local -r secret="$1"
  local -r namespace="$2"

  local resp

  if [[ -n "${namespace}" ]]; then
    resp=$(kubectl get secret "${secret}" -o json -n "${namespace}")
  else
    resp=$(kubectl get secret "${secret}" -o json)
  fi

  echo -e "$(echo "${resp}" | jq -r '.data | to_entries[] | [ .key, (.value | @base64d) ] | @tsv')"
}

check_executable() {
  if ! type "${1}" &>/dev/null; then
    "${1} not found" >&2
    return 1
  fi
}

main() {
  local -r tools=(kubectl jq)

  for tool in "${tools[@]}"; do
    check_executable "${tool}"
  done

  local secret

  if [[ -n "$#" ]]; then
    case "$1" in
      "-h" | "--help")
        usage >&2
        return 1
        ;;
      *)
        secret="$1"
        shift
        ;;
    esac
  else
    usage >&2
    return 1
  fi

  local namespace

  while (($# > 0)); do
    case "$1" in
      "-n" | "--namespace")
        shift
        namespace="$1"
        ;;
      *)
        # Do nothing
        ;;
    esac
    shift
  done

  reveal_secret "${secret}" "${namespace}"
}

main "$@"
