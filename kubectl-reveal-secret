#!/bin/bash

set -e
set -o pipefail

usage() {
  cat <<EOF

  $(basename "${0}") reveals Kubernetes Secret data.

  Usage:
      kubectl reveal secret SECRET_NAME [optional flags]

  Options:
      -n, --namespace    If present, the namespace scope for this CLI request
      --context          The name of the kubeconfig context to use
      -h, --help         Show the usage of this CLI

  Examples:
    # Reveal Secret data in the current namespace.
    $ kubectl reveal secret my-secret

    # Reveal Secret data in the specified namespace.
    $ kubectl reveal secret my-secret -n my-namespace

    # Reveal Secret data in the specified context and namespace.
    $ kubectl reveal secret my-secret --context my-context -n my-namespace

EOF
}

reveal_secret() {
  local -r secret="$1"
  local -r flags=("${@:2}")

  echo -e "$(kubectl get secret "${secret}" -o json "${flags[@]}" | jq -r '.data | to_entries[] | [ .key, (.value | @base64d) ] | @tsv')"
}

check_executable() {
  if ! type "${1}" &>/dev/null; then
    "${1} not found" >&2
    return 1
  fi
}

main() {
  if [[ "$#" == 0 ]]; then
    usage >&2
    return 1
  fi

  local -r tools=(kubectl jq)

  for tool in "${tools[@]}"; do
    check_executable "${tool}"
  done

  local secret

  case "$1" in
    "-h" | "--help")
      usage >&2
      return 0
      ;;
    *)
      secret="$1"
      shift
      ;;
  esac

  declare -a flags=()

  while (($# > 0)); do
    case "$1" in
      "-n" | "--namespace")
        shift
        flags+=(--namespace "$1")
        ;;
      "--context")
        shift
        flags+=(--context "$1")
        ;;
      *)
        # Do nothing
        ;;
    esac
    shift
  done

  reveal_secret "${secret}" "${flags[@]}"
}

main "$@"
